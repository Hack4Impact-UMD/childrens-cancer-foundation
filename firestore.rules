rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is an admin
    function isAdmin() {
      return request.auth != null && 
        request.auth.token.role == 'admin';
    }

    // Helper function to check if user is an applicant
    function isApplicant() {
      return request.auth != null && 
        request.auth.token.role == 'applicant';
    }

    // Applications collection rules
    match /applications/{applicationId} {
      // Allow only admins to read all applications
      allow read: if isAdmin();
      
      // Allow applicants to create new applications
      allow create: if isApplicant() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow applicants to update their own applications
      allow update: if isApplicant() && 
        resource.data.userId == request.auth.uid;
    }

    // Post Grant Reports collection rules
    match /post-grant-reports/{reportId} {
      // Allow applicants to create their own reports
      allow create: if isApplicant() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow applicants to read their own reports
      allow read: if isApplicant() && 
        resource.data.userId == request.auth.uid;
      
      // Allow applicants to update their own reports
      allow update: if isApplicant() && 
        resource.data.userId == request.auth.uid;
      
      // Allow admins to read all reports
      allow read: if isAdmin();
    }

    // Decision Data collection rules
    match /decision-data/{decisionId} {
      // Allow applicants to read decision data (security handled at application level)
      allow read: if isApplicant();
      
      // Allow admins to read and write all decision data
      allow read, write: if isAdmin();
    }

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2030, 12, 25);
    }

    match /applicantUsers/{userId} {
      allow write: if request.resource.data.name != null &&
        request.resource.data.title != null && size(request.resource.data.title) > 0 &&
        request.resource.data.email != null && size(request.resource.data.email) > 0 &&
        request.resource.data.institutionalAffiliation != null && size(request.resource.data.institutionalAffiliation) > 0 &&
        request.resource.data.principalInvestigator != null && size(request.resource.data.principalInvestigator) > 0;
    }

    match /reviewerUsers/{userId} {
      allow write: if request.auth != null &&
        request.resource.data.name != null && size(request.resource.data.name) > 0 &&
        request.resource.data.email != null && size(request.resource.data.email) > 0 &&
        request.resource.data.institutionalAffiliation != null && size(request.resource.data.institutionalAffiliation) > 0;
    }
  }
}